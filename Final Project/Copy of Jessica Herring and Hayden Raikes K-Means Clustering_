{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["1. Import Libraries\n","- Import necessary libraries such as NumPy, Pandas, and Matplotlib for data manipulation and visualization."],"metadata":{"id":"8nxCkLUtevpF"}},{"cell_type":"code","execution_count":6,"metadata":{"id":"V8XL6CFSeoRK","executionInfo":{"status":"ok","timestamp":1698372358936,"user_tz":240,"elapsed":312,"user":{"displayName":"Jessica Herring","userId":"06888788680442545250"}}},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from sklearn.cluster import KMeans\n","\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.datasets import make_blobs\n"]},{"cell_type":"code","source":["from google.colab import drive\n","\n","# Mount Google Drive\n","drive.mount('/content/gdrive')\n"],"metadata":{"id":"vuN-RS5LkNpq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1698372360381,"user_tz":240,"elapsed":1248,"user":{"displayName":"Jessica Herring","userId":"06888788680442545250"}},"outputId":"642442a0-19c0-495c-eff5-89220078135f"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n"]}]},{"cell_type":"markdown","source":["2. Load and Explore Data\n","- Load your dataset into a Pandas DataFrame.\n","- Explore the dataset to understand its structure and features."],"metadata":{"id":"PF2-_ShYey80"}},{"cell_type":"code","source":["# Example: Assuming your data is in a CSV file\n","# Replace 'local_path' with the actual path where you extracted the dataset\n","# Assuming your dataset is in the root of Google Drive\n","file_path = '/content/gdrive/My Drive/Live.csv'\n","data = pd.read_csv(file_path)\n","\n","#examine dataset by first few rows\n","data.head()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":226},"id":"548U0CL7e2dR","executionInfo":{"status":"ok","timestamp":1698372360381,"user_tz":240,"elapsed":12,"user":{"displayName":"Jessica Herring","userId":"06888788680442545250"}},"outputId":"16a9bd32-53cd-40d1-9926-08fada2dd95a"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                          status_id status_type status_published  \\\n","0  246675545449582_1649696485147474       video   4/22/2018 6:00   \n","1  246675545449582_1649426988507757       photo  4/21/2018 22:45   \n","2  246675545449582_1648730588577397       video   4/21/2018 6:17   \n","3  246675545449582_1648576705259452       photo   4/21/2018 2:29   \n","4  246675545449582_1645700502213739       photo   4/18/2018 3:22   \n","\n","   num_reactions  num_comments  num_shares  num_likes  num_loves  num_wows  \\\n","0            529           512         262        432         92         3   \n","1            150             0           0        150          0         0   \n","2            227           236          57        204         21         1   \n","3            111             0           0        111          0         0   \n","4            213             0           0        204          9         0   \n","\n","   num_hahas  num_sads  num_angrys  Column1  Column2  Column3  Column4  \n","0          1         1           0      NaN      NaN      NaN      NaN  \n","1          0         0           0      NaN      NaN      NaN      NaN  \n","2          1         0           0      NaN      NaN      NaN      NaN  \n","3          0         0           0      NaN      NaN      NaN      NaN  \n","4          0         0           0      NaN      NaN      NaN      NaN  "],"text/html":["\n","  <div id=\"df-924ac679-1caf-475d-b81e-9c06c76c2403\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>status_id</th>\n","      <th>status_type</th>\n","      <th>status_published</th>\n","      <th>num_reactions</th>\n","      <th>num_comments</th>\n","      <th>num_shares</th>\n","      <th>num_likes</th>\n","      <th>num_loves</th>\n","      <th>num_wows</th>\n","      <th>num_hahas</th>\n","      <th>num_sads</th>\n","      <th>num_angrys</th>\n","      <th>Column1</th>\n","      <th>Column2</th>\n","      <th>Column3</th>\n","      <th>Column4</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>246675545449582_1649696485147474</td>\n","      <td>video</td>\n","      <td>4/22/2018 6:00</td>\n","      <td>529</td>\n","      <td>512</td>\n","      <td>262</td>\n","      <td>432</td>\n","      <td>92</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>246675545449582_1649426988507757</td>\n","      <td>photo</td>\n","      <td>4/21/2018 22:45</td>\n","      <td>150</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>150</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>246675545449582_1648730588577397</td>\n","      <td>video</td>\n","      <td>4/21/2018 6:17</td>\n","      <td>227</td>\n","      <td>236</td>\n","      <td>57</td>\n","      <td>204</td>\n","      <td>21</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>246675545449582_1648576705259452</td>\n","      <td>photo</td>\n","      <td>4/21/2018 2:29</td>\n","      <td>111</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>111</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>246675545449582_1645700502213739</td>\n","      <td>photo</td>\n","      <td>4/18/2018 3:22</td>\n","      <td>213</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>204</td>\n","      <td>9</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-924ac679-1caf-475d-b81e-9c06c76c2403')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-924ac679-1caf-475d-b81e-9c06c76c2403 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-924ac679-1caf-475d-b81e-9c06c76c2403');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-1f27daf4-e1b7-4379-97b1-3e0d414f0136\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1f27daf4-e1b7-4379-97b1-3e0d414f0136')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-1f27daf4-e1b7-4379-97b1-3e0d414f0136 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["#statistical examine of dataset by columns\n","data.describe()"],"metadata":{"id":"3DI4z8z1lR5X","executionInfo":{"status":"ok","timestamp":1698372360381,"user_tz":240,"elapsed":9,"user":{"displayName":"Jessica Herring","userId":"06888788680442545250"}},"colab":{"base_uri":"https://localhost:8080/","height":300},"outputId":"ca205e90-5a94-41da-c752-3aa2e4dedfb2"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       num_reactions  num_comments   num_shares    num_likes    num_loves  \\\n","count    7050.000000   7050.000000  7050.000000  7050.000000  7050.000000   \n","mean      230.117163    224.356028    40.022553   215.043121    12.728652   \n","std       462.625309    889.636820   131.599965   449.472357    39.972930   \n","min         0.000000      0.000000     0.000000     0.000000     0.000000   \n","25%        17.000000      0.000000     0.000000    17.000000     0.000000   \n","50%        59.500000      4.000000     0.000000    58.000000     0.000000   \n","75%       219.000000     23.000000     4.000000   184.750000     3.000000   \n","max      4710.000000  20990.000000  3424.000000  4710.000000   657.000000   \n","\n","          num_wows    num_hahas     num_sads   num_angrys  Column1  Column2  \\\n","count  7050.000000  7050.000000  7050.000000  7050.000000      0.0      0.0   \n","mean      1.289362     0.696454     0.243688     0.113191      NaN      NaN   \n","std       8.719650     3.957183     1.597156     0.726812      NaN      NaN   \n","min       0.000000     0.000000     0.000000     0.000000      NaN      NaN   \n","25%       0.000000     0.000000     0.000000     0.000000      NaN      NaN   \n","50%       0.000000     0.000000     0.000000     0.000000      NaN      NaN   \n","75%       0.000000     0.000000     0.000000     0.000000      NaN      NaN   \n","max     278.000000   157.000000    51.000000    31.000000      NaN      NaN   \n","\n","       Column3  Column4  \n","count      0.0      0.0  \n","mean       NaN      NaN  \n","std        NaN      NaN  \n","min        NaN      NaN  \n","25%        NaN      NaN  \n","50%        NaN      NaN  \n","75%        NaN      NaN  \n","max        NaN      NaN  "],"text/html":["\n","  <div id=\"df-57dea102-7214-46fc-9606-91d978efcf92\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>num_reactions</th>\n","      <th>num_comments</th>\n","      <th>num_shares</th>\n","      <th>num_likes</th>\n","      <th>num_loves</th>\n","      <th>num_wows</th>\n","      <th>num_hahas</th>\n","      <th>num_sads</th>\n","      <th>num_angrys</th>\n","      <th>Column1</th>\n","      <th>Column2</th>\n","      <th>Column3</th>\n","      <th>Column4</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>7050.000000</td>\n","      <td>7050.000000</td>\n","      <td>7050.000000</td>\n","      <td>7050.000000</td>\n","      <td>7050.000000</td>\n","      <td>7050.000000</td>\n","      <td>7050.000000</td>\n","      <td>7050.000000</td>\n","      <td>7050.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>230.117163</td>\n","      <td>224.356028</td>\n","      <td>40.022553</td>\n","      <td>215.043121</td>\n","      <td>12.728652</td>\n","      <td>1.289362</td>\n","      <td>0.696454</td>\n","      <td>0.243688</td>\n","      <td>0.113191</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>462.625309</td>\n","      <td>889.636820</td>\n","      <td>131.599965</td>\n","      <td>449.472357</td>\n","      <td>39.972930</td>\n","      <td>8.719650</td>\n","      <td>3.957183</td>\n","      <td>1.597156</td>\n","      <td>0.726812</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>17.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>17.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>59.500000</td>\n","      <td>4.000000</td>\n","      <td>0.000000</td>\n","      <td>58.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>219.000000</td>\n","      <td>23.000000</td>\n","      <td>4.000000</td>\n","      <td>184.750000</td>\n","      <td>3.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>4710.000000</td>\n","      <td>20990.000000</td>\n","      <td>3424.000000</td>\n","      <td>4710.000000</td>\n","      <td>657.000000</td>\n","      <td>278.000000</td>\n","      <td>157.000000</td>\n","      <td>51.000000</td>\n","      <td>31.000000</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-57dea102-7214-46fc-9606-91d978efcf92')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-57dea102-7214-46fc-9606-91d978efcf92 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-57dea102-7214-46fc-9606-91d978efcf92');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-16774f79-3ee4-435d-9b2e-0853d809003e\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-16774f79-3ee4-435d-9b2e-0853d809003e')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-16774f79-3ee4-435d-9b2e-0853d809003e button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["#examine dataset by datatypes and values\n","data.info()\n"],"metadata":{"id":"8Sgha39Tlb5M","executionInfo":{"status":"ok","timestamp":1698372360381,"user_tz":240,"elapsed":8,"user":{"displayName":"Jessica Herring","userId":"06888788680442545250"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"ff71c626-dd82-4517-ef2a-c5e02901a449"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 7050 entries, 0 to 7049\n","Data columns (total 16 columns):\n"," #   Column            Non-Null Count  Dtype  \n","---  ------            --------------  -----  \n"," 0   status_id         7050 non-null   object \n"," 1   status_type       7050 non-null   object \n"," 2   status_published  7050 non-null   object \n"," 3   num_reactions     7050 non-null   int64  \n"," 4   num_comments      7050 non-null   int64  \n"," 5   num_shares        7050 non-null   int64  \n"," 6   num_likes         7050 non-null   int64  \n"," 7   num_loves         7050 non-null   int64  \n"," 8   num_wows          7050 non-null   int64  \n"," 9   num_hahas         7050 non-null   int64  \n"," 10  num_sads          7050 non-null   int64  \n"," 11  num_angrys        7050 non-null   int64  \n"," 12  Column1           0 non-null      float64\n"," 13  Column2           0 non-null      float64\n"," 14  Column3           0 non-null      float64\n"," 15  Column4           0 non-null      float64\n","dtypes: float64(4), int64(9), object(3)\n","memory usage: 881.4+ KB\n"]}]},{"cell_type":"code","source":["#examine missing values\n","data.isnull().sum()"],"metadata":{"id":"u7RD_1qRl0uQ","executionInfo":{"status":"ok","timestamp":1698372360548,"user_tz":240,"elapsed":174,"user":{"displayName":"Jessica Herring","userId":"06888788680442545250"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"4dbadb86-3d13-4cb3-8bb1-4d3549893dd6"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["status_id              0\n","status_type            0\n","status_published       0\n","num_reactions          0\n","num_comments           0\n","num_shares             0\n","num_likes              0\n","num_loves              0\n","num_wows               0\n","num_hahas              0\n","num_sads               0\n","num_angrys             0\n","Column1             7050\n","Column2             7050\n","Column3             7050\n","Column4             7050\n","dtype: int64"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["#examine by plot\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","# Example: Histogram of a numeric column\n","plt.hist(data['num_reactions'])\n","plt.title('Histogram of reactions')\n","plt.show()\n","\n","# Example: Countplot of a categorical column\n","sns.countplot(x='num_likes', data=data)\n","plt.title('Countplot of likes')\n","plt.show()\n"],"metadata":{"id":"bdAlPgs6l6IF","executionInfo":{"status":"ok","timestamp":1698372368770,"user_tz":240,"elapsed":8224,"user":{"displayName":"Jessica Herring","userId":"06888788680442545250"}},"colab":{"base_uri":"https://localhost:8080/","height":907},"outputId":"3d6bed61-fb1f-48e7-b004-218a2ef857aa"},"execution_count":12,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["3. Preprocess Data\n","- Handle any missing values.\n","- Scale or normalize the features if needed."],"metadata":{"id":"8YQJNQtvfILd"}},{"cell_type":"code","source":["# Example: Handling missing values\n","data1 = data.dropna(axis=1, how='all')\n","columns_to_drop = ['Column1', 'Column2', 'Column3', 'Column4', 'status_published']\n","df = data.drop(columns=columns_to_drop)\n","df.info()\n","\n","# Replace text values with numerical values\n","replacement_dict = {'photo': 1, 'video': 2, 'status': 3, 'link': 4}\n","df.replace(replacement_dict, inplace=True)\n","\n"],"metadata":{"id":"u1nZtUu2fM4t","executionInfo":{"status":"ok","timestamp":1698372368771,"user_tz":240,"elapsed":10,"user":{"displayName":"Jessica Herring","userId":"06888788680442545250"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"a6f37939-1522-40a1-d8a4-1f1cb466d317"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 7050 entries, 0 to 7049\n","Data columns (total 11 columns):\n"," #   Column         Non-Null Count  Dtype \n","---  ------         --------------  ----- \n"," 0   status_id      7050 non-null   object\n"," 1   status_type    7050 non-null   object\n"," 2   num_reactions  7050 non-null   int64 \n"," 3   num_comments   7050 non-null   int64 \n"," 4   num_shares     7050 non-null   int64 \n"," 5   num_likes      7050 non-null   int64 \n"," 6   num_loves      7050 non-null   int64 \n"," 7   num_wows       7050 non-null   int64 \n"," 8   num_hahas      7050 non-null   int64 \n"," 9   num_sads       7050 non-null   int64 \n"," 10  num_angrys     7050 non-null   int64 \n","dtypes: int64(9), object(2)\n","memory usage: 606.0+ KB\n"]}]},{"cell_type":"markdown","source":["4. Choose the Number of Clusters (K)\n","- Use methods like the Elbow Method to determine the optimal number of clusters."],"metadata":{"id":"8Ist5x66fPw2"}},{"cell_type":"code","source":["# Example: Elbow Method\n","wcss = []  # Within-Cluster-Sum-of-Squares\n","\n","for i in range(1, 11):\n","    kmeans = KMeans(n_clusters=i, init='k-means++', max_iter=300, n_init=10, random_state=0)\n","    kmeans.fit(df)\n","    wcss.append(kmeans.inertia_)\n","\n","# Plot the Elbow graph\n","plt.plot(range(1, 11), wcss)\n","plt.title('Elbow Method')\n","plt.xlabel('Number of clusters')\n","plt.ylabel('WCSS')\n","plt.show()\n"],"metadata":{"id":"qBrKqerVfU4L","executionInfo":{"status":"ok","timestamp":1698372373323,"user_tz":240,"elapsed":4559,"user":{"displayName":"Jessica Herring","userId":"06888788680442545250"}},"colab":{"base_uri":"https://localhost:8080/","height":472},"outputId":"89e02657-e775-45e3-8a7b-d70e94e9f5d3"},"execution_count":14,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["5. Train K-means Model\n","- Use the optimal K value to train the K-means clustering model."],"metadata":{"id":"-5dSIQNMfW2w"}},{"cell_type":"code","source":["# Example: Training K-means with optimal K\n","k = 3  # replace with your optimal K value\n","kmeans = KMeans(n_clusters=k, init='k-means++', max_iter=300, n_init=10, random_state=0)\n","kmeans.fit(df)\n","\n","# Add the cluster labels to the original dataset\n","data['Cluster'] = kmeans.labels_\n"],"metadata":{"id":"TODPyOklfaZj","executionInfo":{"status":"ok","timestamp":1698372373855,"user_tz":240,"elapsed":542,"user":{"displayName":"Jessica Herring","userId":"06888788680442545250"}}},"execution_count":15,"outputs":[]},{"cell_type":"markdown","source":["6. Visualize Results\n","- Visualize the clusters using scatter plots or other relevant visualizations."],"metadata":{"id":"hSQqZLeaflse"}},{"cell_type":"code","source":["# Example: Scatter plot for two features\n","plt.scatter(data['status_type'], data['num_likes'], c=data['Cluster'], cmap='viridis')\n","plt.title('K-means Clustering Results')\n","plt.xlabel('Type')\n","plt.ylabel('Number of Likes')\n","plt.show()\n"],"metadata":{"id":"b8NnZS32fp5g","executionInfo":{"status":"ok","timestamp":1698372374389,"user_tz":240,"elapsed":307,"user":{"displayName":"Jessica Herring","userId":"06888788680442545250"}},"colab":{"base_uri":"https://localhost:8080/","height":472},"outputId":"418b451e-85ad-4d53-deb0-14ea5fbc950f"},"execution_count":16,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["7. Interpret Results\n","- Analyze and interpret the clustering results.\n","- Evaluate the model's performance if ground truth is available."],"metadata":{"id":"hM4rmo4-fsqm"}},{"cell_type":"code","source":["# Example: Display cluster centers\n","centers = kmeans.cluster_centers_\n","print(\"Cluster Centers:\")\n","print(centers)\n"],"metadata":{"id":"f53AQNc6fvjO","executionInfo":{"status":"ok","timestamp":1698372374389,"user_tz":240,"elapsed":11,"user":{"displayName":"Jessica Herring","userId":"06888788680442545250"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"6dbccb6e-b722-4e78-853c-8dc935ba1277"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["Cluster Centers:\n","[[3.93074817e+29 1.44799286e+00 2.44495094e+02 1.59560571e+02\n","  4.01207850e+01 2.29359322e+02 1.29816236e+01 1.30472792e+00\n","  5.96431757e-01 1.49330955e-01 1.03657449e-01]\n"," [1.04908612e+31 1.63010204e+00 1.34145408e+02 7.50934949e+02\n","  6.40089286e+01 1.19006378e+02 1.14285714e+01 1.26020408e+00\n","  1.69260204e+00 5.48469388e-01 2.09183673e-01]\n"," [2.46675545e+30 1.37518911e+00 2.22028744e+02 1.49228442e+02\n","  1.07397882e+01 2.07555219e+02 1.21255673e+01 1.19364599e+00\n","  3.63086233e-01 6.82299546e-01 8.01815431e-02]]\n"]}]},{"cell_type":"code","source":["X = df.values#(df.values, ['status_type', 'num_hahas'])\n","\n","print(X)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zyjJjTYz9N1T","executionInfo":{"status":"ok","timestamp":1698375184360,"user_tz":240,"elapsed":251,"user":{"displayName":"Jessica Herring","userId":"06888788680442545250"}},"outputId":"fd21b216-3471-4d91-cb2e-e1aa607ec477"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["[['246675545449582_1649696485147474' 2 529 ... 1 1 0]\n"," ['246675545449582_1649426988507757' 1 150 ... 0 0 0]\n"," ['246675545449582_1648730588577397' 2 227 ... 1 0 0]\n"," ...\n"," ['1050855161656896_1060126464063099' 1 2 ... 0 0 0]\n"," ['1050855161656896_1058663487542730' 1 351 ... 0 0 0]\n"," ['1050855161656896_1050858841656528' 1 17 ... 0 0 0]]\n"]}]},{"cell_type":"code","source":["X, y = make_blobs(n_samples=300, centers=2, cluster_std = 2.75, random_state=42)\n","print(X[:5])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FzvxqhN791Ea","executionInfo":{"status":"ok","timestamp":1698374354136,"user_tz":240,"elapsed":160,"user":{"displayName":"Jessica Herring","userId":"06888788680442545250"}},"outputId":"880005a0-112c-4246-b627-9abc878c883b"},"execution_count":44,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 5.57074396  0.83112792]\n"," [ 6.3960081  -2.59601049]\n"," [-2.54631499  6.10558107]\n"," [ 6.14439663  1.41713989]\n"," [ 5.43675969  7.68052188]]\n"]}]},{"cell_type":"code","source":["\n","\n","# Generate synthetic data for demonstration\n","#X = df[['status_type', 'num_hahas']].values\n","X = df.values#(df.values, ['status_type', 'num_hahas'])\n","\n","print(X)\n","\n","\n","#X, y = make_blobs(n_samples=300, centers=3, cluster_std = 2.75, random_state=42)\n","\n","\n","#print(\"Shape of X before clustering:\", X.shape)\n","\n","print(\"X:\")\n","print(X[:5])\n","\n","# Standardize the features\n","#scaler = StandardScaler()\n","#X_scaled = scaler.fit_transform(X)\n","#print(\"X Scaled:\")\n","#print(X_scaled[:5])\n","\n","# Function to plot the current state of centroids and clusters\n","def plot_clusters(X, centroids, labels, iteration):\n","    plt.figure(figsize=(8, 6))\n","    plt.scatter(X[:, 0], X[:, 1], c=labels, cmap='viridis', alpha=0.5, edgecolors='w', linewidths=0.5)\n","    plt.scatter(centroids[:, 0], centroids[:, 1], c='black', marker='X', s=86, label='Centroids')\n","    plt.title(f'K-means Clustering - Iteration {iteration}')\n","    plt.legend()\n","    plt.show()\n","\n","# Function to perform K-means clustering and visualize each iteration\n","def kmeans_visualization(X, k, max_iter=10):\n","    kmeans = KMeans(n_clusters=k, init='k-means++', max_iter=300, n_init=10, random_state=42)\n","\n","    for iteration in range(1, max_iter + 1):\n","        kmeans.fit(X)\n","        centroids = kmeans.cluster_centers_\n","        labels = kmeans.labels_\n","\n","         # Print centroids for each iteration\n","        print(f\"Iteration {iteration} - Centroids:\")\n","        print(centroids)\n","        # Visualize the current state\n","        plot_clusters(X, centroids, labels, iteration)\n","\n","# Specify the number of clusters (K)\n","k = 3\n","\n","# Visualize the K-means clustering process\n","kmeans_visualization(X, k, max_iter=5)\n"],"metadata":{"id":"GbfZqU5vuYdD","executionInfo":{"status":"error","timestamp":1698375403607,"user_tz":240,"elapsed":204814,"user":{"displayName":"Jessica Herring","userId":"06888788680442545250"}},"colab":{"base_uri":"https://localhost:8080/","height":1000},"outputId":"e5219a13-956d-4a91-aae8-cb905b99edc7"},"execution_count":46,"outputs":[{"output_type":"stream","name":"stdout","text":["[['246675545449582_1649696485147474' 2 529 ... 1 1 0]\n"," ['246675545449582_1649426988507757' 1 150 ... 0 0 0]\n"," ['246675545449582_1648730588577397' 2 227 ... 1 0 0]\n"," ...\n"," ['1050855161656896_1060126464063099' 1 2 ... 0 0 0]\n"," ['1050855161656896_1058663487542730' 1 351 ... 0 0 0]\n"," ['1050855161656896_1050858841656528' 1 17 ... 0 0 0]]\n","X:\n","[['246675545449582_1649696485147474' 2 529 512 262 432 92 3 1 1 0]\n"," ['246675545449582_1649426988507757' 1 150 0 0 150 0 0 0 0 0]\n"," ['246675545449582_1648730588577397' 2 227 236 57 204 21 1 1 0 0]\n"," ['246675545449582_1648576705259452' 1 111 0 0 111 0 0 0 0 0]\n"," ['246675545449582_1645700502213739' 1 213 0 0 204 9 0 0 0 0]]\n","Iteration 1 - Centroids:\n","[[3.93074817e+29 1.44799286e+00 2.44495094e+02 1.59560571e+02\n","  4.01207850e+01 2.29359322e+02 1.29816236e+01 1.30472792e+00\n","  5.96431757e-01 1.49330955e-01 1.03657449e-01]\n"," [1.04908612e+31 1.63010204e+00 1.34145408e+02 7.50934949e+02\n","  6.40089286e+01 1.19006378e+02 1.14285714e+01 1.26020408e+00\n","  1.69260204e+00 5.48469388e-01 2.09183673e-01]\n"," [2.46675545e+30 1.37518911e+00 2.22028744e+02 1.49228442e+02\n","  1.07397882e+01 2.07555219e+02 1.21255673e+01 1.19364599e+00\n","  3.63086233e-01 6.82299546e-01 8.01815431e-02]]\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Iteration 2 - Centroids:\n","[[3.93074817e+29 1.44799286e+00 2.44495094e+02 1.59560571e+02\n","  4.01207850e+01 2.29359322e+02 1.29816236e+01 1.30472792e+00\n","  5.96431757e-01 1.49330955e-01 1.03657449e-01]\n"," [1.04908612e+31 1.63010204e+00 1.34145408e+02 7.50934949e+02\n","  6.40089286e+01 1.19006378e+02 1.14285714e+01 1.26020408e+00\n","  1.69260204e+00 5.48469388e-01 2.09183673e-01]\n"," [2.46675545e+30 1.37518911e+00 2.22028744e+02 1.49228442e+02\n","  1.07397882e+01 2.07555219e+02 1.21255673e+01 1.19364599e+00\n","  3.63086233e-01 6.82299546e-01 8.01815431e-02]]\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAvQAAAIQCAYAAADuCfqCAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAA/bklEQVR4nO3deXRU9f3/8dckkJVkIJoNCDvIDpKCRCoBBANCALXgWkBBagt1waVNa78NKg3WvdUviFZxIfIVkCXITlhks8EBRUUUZBMSQJEMCSGDyf394S8jkwUSSDL5JM/HOfcc5nM/99733AznvObO536uzbIsSwAAAACM5OPtAgAAAABcOgI9AAAAYDACPQAAAGAwAj0AAABgMAI9AAAAYDACPQAAAGAwAj0AAABgMAI9AAAAYDACPQAAAGAwAj0A4IL69eunfv36ebuMS7J+/XrZbDatX7/e26XUOgcOHJDNZtPs2bO9XQpQ5xHoARhv9uzZstls2r59u0d7dna2evXqpYCAAK1YscJL1dVcx44d0yOPPKL27dsrKChIwcHBio2N1VNPPaVTp05VWx3/+Mc/tGjRomo7Xk1U9MVj/vz57rYtW7YoOTm5Wv8WpUlNTdWLL77o1RqK++CDD3TrrbeqVatWCgoK0lVXXaWHH37Y6+cK8JZ63i4AAKqC0+nUDTfcoM8++0wLFy7U4MGDvV1SjZKRkaEbb7xROTk5uuuuuxQbGytJ2r59u6ZPn66NGzdq1apV1VLLP/7xD/3mN7/RyJEjK33fffv2VV5envz8/Cp931Vty5Ytmjp1qsaNG6eGDRt6rY7U1FR9/vnnevDBBz3amzdvrry8PNWvX7/aa5o4caIaN26su+66S82aNdOuXbv08ssva9myZXI4HAoMDKz2mgBvItADqHVOnz6thIQE7dy5Ux988IGGDBni7ZJqlFOnTummm26Sr6+vduzYofbt23usnzZtml577TUvVVc5zp49Kz8/P/n4+CggIMDb5dQoZ86cUVBQ0GXvx2azee3czp8/v8QwsNjYWI0dO1Zz5szRhAkTvFIX4C0MuQFQq+Tk5Gjw4MFyOBxasGCBhg4desH+ycnJstls+vrrr3XXXXfJbrcrPDxcf/vb32RZlg4fPqwRI0YoNDRUUVFReu6550rsIz8/X3//+9/Vpk0b+fv7KyYmRo899pjy8/M9+r355psaMGCAIiIi5O/vr44dO2rGjBkl9teiRQsNGzZMmzZtcg8ZatWqld5++22PfufOndPUqVPVtm1bBQQE6IorrtCvf/1rrV69+oLv+dVXX9WRI0f0/PPPlwjzkhQZGanHH3+8zO2LhjgdOHDAo7208erffPONbrnlFkVFRSkgIEBNmzbVbbfdpuzsbEk/h8Lc3Fy99dZbstlsstlsGjdunHv7I0eO6J577lFkZKT8/f3VqVMnvfHGG6Ued+7cuXr88cfVpEkTBQUFyel0llpTv3791LlzZ3355Zfq37+/goKC1KRJE/3zn/8s8V4PHjyo4cOHKzg4WBEREXrooYe0cuXKKh+Xn5ycrEcffVSS1LJlS/e5Of+cv/vuu4qNjVVgYKDCwsJ022236fDhwx77KXqvn3zyifr27augoCD95S9/kSQtXrxYQ4cOVePGjeXv76/WrVvrySefVEFBgcf2H374oQ4ePOiuoUWLFpLKHkOfnp6u6667TsHBwWrYsKFGjBih3bt3l3h/NptNe/fudf8CYbfbdffdd+vMmTMXPT+l3dNx0003SVKJYwF1AVfoAdQaubm5GjJkiDIyMjR//nwNGzas3Nveeuut6tChg6ZPn64PP/xQTz31lMLCwvTqq69qwIABevrppzVnzhw98sgj6tmzp/r27StJKiws1PDhw7Vp0yZNnDhRHTp00K5du/TCCy/o66+/9hgbPmPGDHXq1EnDhw9XvXr1lJaWpj/84Q8qLCzUpEmTPOrZu3evfvOb32j8+PEaO3as3njjDY0bN06xsbHq1KmTpJ9DUUpKiiZMmKBevXrJ6XRq+/btcjgcGjRoUJnvdcmSJQoMDNRvfvObCpzdinO5XEpISFB+fr7++Mc/KioqSkeOHNHSpUt16tQp2e12vfPOO+76J06cKElq3bq1pJ/H+Pfu3Vs2m02TJ09WeHi4li9frvHjx8vpdJYYAvLkk0/Kz89PjzzyiPLz8y84zObHH3/U4MGDdfPNN2v06NGaP3++/vSnP6lLly7uX3Ryc3M1YMAAZWZm6oEHHlBUVJRSU1O1bt26qjlh57n55pv19ddf67333tMLL7ygK6+8UpIUHh4u6edfUf72t79p9OjRmjBhgk6cOKF///vf6tu3r3bs2OExROeHH37QkCFDdNttt+muu+5SZGSkpJ+/mDVo0EBTpkxRgwYNlJ6erv/5n/+R0+nUM888I0n661//quzsbH333Xd64YUXJEkNGjQos+41a9ZoyJAhatWqlZKTk5WXl6d///vf6tOnjxwOh/vLQJHRo0erZcuWSklJkcPh0Ouvv66IiAg9/fTTFT5nWVlZkuQ+V0CdYgGA4d58801LktW8eXOrfv361qJFi8q97d///ndLkjVx4kR3208//WQ1bdrUstls1vTp093tP/74oxUYGGiNHTvW3fbOO+9YPj4+1kcffeSx35kzZ1qSrM2bN7vbzpw5U+L4CQkJVqtWrTzamjdvbkmyNm7c6G47fvy45e/vbz388MPutm7dullDhw4t93st0qhRI6tbt27l7h8fH2/Fx8e7Xxed7/3793v0W7dunSXJWrdunWVZlrVjxw5LkjVv3rwL7j84ONjjnBYZP368FR0dbX3//fce7bfddptlt9vd57PouK1atSpxjovXVPR+JFlvv/22uy0/P9+KioqybrnlFnfbc889Z0ny+Dzl5eVZ7du3L7HPy1VU5/nn6plnnin1PB84cMDy9fW1pk2b5tG+a9cuq169eh7tRe915syZJY5Z2ufxd7/7nRUUFGSdPXvW3TZ06FCrefPmJfru37/fkmS9+eab7rbu3btbERER1g8//OBu+/TTTy0fHx9rzJgx7rai/3f33HOPxz5vuukm64orrihxrPIYP3685evra3399deXtD1gMobcAKg1jh07poCAAMXExFR42/PH3Pr6+upXv/qVLMvS+PHj3e0NGzbUVVddpW+//dbdNm/ePHXo0EHt27fX999/714GDBggSR5Xc8+/US87O1vff/+94uPj9e2337qHoBTp2LGjrrvuOvfr8PDwEsdu2LChvvjiC33zzTcVeq9Op1MhISEV2uZS2O12SdLKlSvLNYzifJZlacGCBUpMTJRlWR7nNiEhQdnZ2XI4HB7bjB07ttw3QzZo0EB33XWX+7Wfn5969erlcX5XrFihJk2aaPjw4e62gIAA3XvvvRV6L5Xtgw8+UGFhoUaPHu1xXqKiotS2bdsSvyD4+/vr7rvvLrGf88/V6dOn9f333+u6667TmTNn9NVXX1W4rszMTO3cuVPjxo1TWFiYu71r164aNGiQli1bVmKb++67z+P1ddddpx9++EFOp7NCx05NTdV//vMfPfzww2rbtm2FawdMR6AHUGu8+uqr8vPz0+DBg7Vnzx53e0FBgbKysjwWl8vlsW2zZs08XtvtdgUEBJT4+d5ut+vHH390v/7mm2/0xRdfKDw83GNp166dJOn48ePuvps3b9bAgQPdY4vDw8Pd45mLB/ri9UhSo0aNPI79xBNP6NSpU2rXrp26dOmiRx99VJ999tlFz1NoaKhOnz590X6Xq2XLlpoyZYpef/11XXnllUpISNArr7xS4r2W5sSJEzp16pRmzZpV4twWhdPzz23R8cqradOmstlsHm3Fz+/BgwfVunXrEv3atGlz0f27XK4Sn7nzx6Zfjm+++UaWZalt27Ylzs3u3btLnJcmTZqUOvzoiy++0E033SS73a7Q0FCFh4e7v+SU529U3MGDByVJV111VYl1HTp00Pfff6/c3FyP9uKf80aNGkmSx9/hYj766CONHz9eCQkJmjZtWkXLBmoFxtADqDU6duyoZcuW6frrr9egQYO0efNmxcTE6PDhwyXC3rp16zxurPP19S2xv9LapJ+vHhcpLCxUly5d9Pzzz5fat+jXgn379un6669X+/bt9fzzzysmJkZ+fn5atmyZXnjhBRUWFlb42H379tW+ffu0ePFirVq1Sq+//rpeeOEFzZw584KzfLRv3147d+6Uy+W6pOkciwfcIqUF1ueee07jxo1z13j//fcrJSVF27ZtU9OmTcs8RtH5uOuuuzR27NhS+3Tt2tXjdUWmKizP+b0cW7ZsUf/+/T3a9u/fX2IM+aUoLCyUzWbT8uXLS30fxce4l3ZeTp06pfj4eIWGhuqJJ55Q69atFRAQIIfDoT/96U8lPo9V5XL/Dp9++qmGDx+uzp07a/78+apXj1iDuolPPoBapVevXlq0aJGGDh2qQYMG6aOPPlJUVFSJmV+6detWKcdr3bq1Pv30U11//fVlBl1JSktLU35+vpYsWeJxVfJyb7AMCwvT3Xffrbvvvls5OTnq27evkpOTLxjoExMTtXXrVi1YsEC33357hY9ZdBW1+EN8iq7QFtelSxd16dJFjz/+uLZs2aI+ffpo5syZeuqppySV/gUhPDxcISEhKigo0MCBAytcY2Vo3ry5vvzyS1mW5VHj3r17L7ptt27dSnzmoqKiKnT8sj5PrVu3lmVZatmypfuXoIpav369fvjhB33wwQfuG7yln790lLeO4po3by5JHr+OFfnqq6905ZVXKjg4+JLqLc2+ffs0ePBgRUREaNmyZRe8WReo7RhyA6DWuf766/Xee+9p7969Gjx4sFwulwYOHOixFIXSyzV69GgdOXKk1Hnb8/Ly3EMMiq5Enn/lMTs7W2+++eYlH/uHH37weN2gQQO1adOmxHSZxd13332Kjo7Www8/rK+//rrE+uPHj7vDdmmKZqHZuHGju62goECzZs3y6Od0OvXTTz95tHXp0kU+Pj4eNQYHB5f4cuDr66tbbrlFCxYs0Oeff16ihhMnTpT9BitJQkKCjhw5oiVLlrjbzp49W645+hs1alTiM1fROduLwm/xc3PzzTfL19dXU6dOLXEl27KsEp+L0pT2eXS5XPrf//3fUusozxCc6Ohode/eXW+99ZZHzZ9//rlWrVqlG2+88aL7KK+srCzdcMMN8vHx0cqVK92z/wB1FVfoAdRKN910k1577TXdc889Gj58uFasWFElD8H57W9/q/fff1/33Xef1q1bpz59+qigoEBfffWV3n//fa1cuVK/+tWvdMMNN8jPz0+JiYn63e9+p5ycHL322muKiIhQZmbmJR27Y8eO6tevn2JjYxUWFqbt27dr/vz5mjx58gW3a9SokRYuXKgbb7xR3bt393hSrMPh0Hvvvae4uLgyt+/UqZN69+6tpKQknTx5UmFhYZo7d26J8J6enq7Jkydr1KhRateunX766Se988477rBeJDY2VmvWrNHzzz+vxo0bq2XLlrrmmms0ffp0rVu3Ttdcc43uvfdedezYUSdPnpTD4dCaNWt08uTJSzpv5fW73/1OL7/8sm6//XY98MADio6O1pw5c9yfo/Jeub5URX+Tv/71r7rttttUv359JSYmqnXr1nrqqaeUlJSkAwcOaOTIkQoJCdH+/fu1cOFCTZw4UY888sgF933ttdeqUaNGGjt2rO6//37ZbDa98847pQ51iY2N1f/93/9pypQp6tmzpxo0aKDExMRS9/vMM89oyJAhiouL0/jx493TVtrtdiUnJ1/2OSkyePBgffvtt3rssce0adMmbdq0yb0uMjLygtO2ArWSF2bWAYBKVTSNYkZGRol1zz77rCXJGjZsmHXu3LkS64umzztx4oRH+9ixY63g4OAS/ePj461OnTp5tLlcLuvpp5+2OnXqZPn7+1uNGjWyYmNjralTp1rZ2dnufkuWLLG6du1qBQQEWC1a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\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Iteration 3 - Centroids:\n","[[3.93074817e+29 1.44799286e+00 2.44495094e+02 1.59560571e+02\n","  4.01207850e+01 2.29359322e+02 1.29816236e+01 1.30472792e+00\n","  5.96431757e-01 1.49330955e-01 1.03657449e-01]\n"," [1.04908612e+31 1.63010204e+00 1.34145408e+02 7.50934949e+02\n","  6.40089286e+01 1.19006378e+02 1.14285714e+01 1.26020408e+00\n","  1.69260204e+00 5.48469388e-01 2.09183673e-01]\n"," [2.46675545e+30 1.37518911e+00 2.22028744e+02 1.49228442e+02\n","  1.07397882e+01 2.07555219e+02 1.21255673e+01 1.19364599e+00\n","  3.63086233e-01 6.82299546e-01 8.01815431e-02]]\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-46-3ec4078d96da>\u001b[0m in \u001b[0;36m<cell line: 50>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     48\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     49\u001b[0m \u001b[0;31m# Visualize the K-means clustering process\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 50\u001b[0;31m \u001b[0mkmeans_visualization\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_iter\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-46-3ec4078d96da>\u001b[0m in \u001b[0;36mkmeans_visualization\u001b[0;34m(X, k, max_iter)\u001b[0m\n\u001b[1;32m     42\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcentroids\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m         \u001b[0;31m# Visualize the current state\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 44\u001b[0;31m         \u001b[0mplot_clusters\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcentroids\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0miteration\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     45\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     46\u001b[0m \u001b[0;31m# Specify the number of clusters (K)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-46-3ec4078d96da>\u001b[0m in \u001b[0;36mplot_clusters\u001b[0;34m(X, centroids, labels, iteration)\u001b[0m\n\u001b[1;32m     27\u001b[0m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf'K-means Clustering - Iteration {iteration}'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     28\u001b[0m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlegend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 29\u001b[0;31m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     30\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m \u001b[0;31m# Function to perform K-means clustering and visualize each iteration\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/pyplot.py\u001b[0m in \u001b[0;36mshow\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    444\u001b[0m     \"\"\"\n\u001b[1;32m    445\u001b[0m     \u001b[0m_warn_if_gui_out_of_main_thread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 446\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_get_backend_mod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    447\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    448\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib_inline/backend_inline.py\u001b[0m in \u001b[0;36mshow\u001b[0;34m(close, block)\u001b[0m\n\u001b[1;32m     88\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     89\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mfigure_manager\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mGcf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_all_fig_managers\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 90\u001b[0;31m             display(\n\u001b[0m\u001b[1;32m     91\u001b[0m                 \u001b[0mfigure_manager\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     92\u001b[0m                 \u001b[0mmetadata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0m_fetch_figure_metadata\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigure_manager\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/IPython/core/display.py\u001b[0m in \u001b[0;36mdisplay\u001b[0;34m(include, exclude, metadata, transient, display_id, *objs, **kwargs)\u001b[0m\n\u001b[1;32m    318\u001b[0m             \u001b[0mpublish_display_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmetadata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmetadata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    319\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 320\u001b[0;31m             \u001b[0mformat_dict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmd_dict\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minclude\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minclude\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexclude\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mexclude\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    321\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mformat_dict\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    322\u001b[0m                 \u001b[0;31m# nothing to display (e.g. _ipython_display_ took over)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/IPython/core/formatters.py\u001b[0m in \u001b[0;36mformat\u001b[0;34m(self, obj, include, exclude)\u001b[0m\n\u001b[1;32m    178\u001b[0m             \u001b[0mmd\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    179\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 180\u001b[0;31m                 \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mformatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    181\u001b[0m             \u001b[0;32mexcept\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    182\u001b[0m                 \u001b[0;31m# FIXME: log the exception\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<decorator-gen-2>\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, obj)\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/IPython/core/formatters.py\u001b[0m in \u001b[0;36mcatch_format_error\u001b[0;34m(method, self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    222\u001b[0m     \u001b[0;34m\"\"\"show traceback on failed format call\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    223\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 224\u001b[0;31m         \u001b[0mr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    225\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mNotImplementedError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    226\u001b[0m         \u001b[0;31m# don't warn on NotImplementedErrors\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/IPython/core/formatters.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, obj)\u001b[0m\n\u001b[1;32m    339\u001b[0m                 \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    340\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 341\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mprinter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    342\u001b[0m             \u001b[0;31m# Finally look for special method names\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    343\u001b[0m             \u001b[0mmethod\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_real_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprint_method\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/IPython/core/pylabtools.py\u001b[0m in \u001b[0;36mprint_figure\u001b[0;34m(fig, fmt, bbox_inches, base64, **kwargs)\u001b[0m\n\u001b[1;32m    149\u001b[0m         \u001b[0mFigureCanvasBase\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    150\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 151\u001b[0;31m     \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprint_figure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbytes_io\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    152\u001b[0m     \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbytes_io\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetvalue\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    153\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfmt\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'svg'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/backend_bases.py\u001b[0m in \u001b[0;36mprint_figure\u001b[0;34m(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, pad_inches, bbox_extra_artists, backend, **kwargs)\u001b[0m\n\u001b[1;32m   2340\u001b[0m                 )\n\u001b[1;32m   2341\u001b[0m                 \u001b[0;32mwith\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"_draw_disabled\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnullcontext\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2342\u001b[0;31m                     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2343\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2344\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mbbox_inches\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer, *args, **kwargs)\u001b[0m\n\u001b[1;32m     93\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mwraps\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     94\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mdraw_wrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 95\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     96\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_rasterizing\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     97\u001b[0m             \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstop_rasterizing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer)\u001b[0m\n\u001b[1;32m     70\u001b[0m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     71\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 72\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     73\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     74\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_agg_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/figure.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self, renderer)\u001b[0m\n\u001b[1;32m   3138\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3139\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpatch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3140\u001b[0;31m             mimage._draw_list_compositing_images(\n\u001b[0m\u001b[1;32m   3141\u001b[0m                 renderer, self, artists, self.suppressComposite)\n\u001b[1;32m   3142\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/image.py\u001b[0m in \u001b[0;36m_draw_list_compositing_images\u001b[0;34m(renderer, parent, artists, suppress_composite)\u001b[0m\n\u001b[1;32m    129\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mnot_composite\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mhas_images\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    130\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0ma\u001b[0m \u001b[0;32min\u001b[0m \u001b[0martists\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 131\u001b[0;31m             \u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    132\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    133\u001b[0m         \u001b[0;31m# Composite any adjacent images together\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer)\u001b[0m\n\u001b[1;32m     70\u001b[0m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     71\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 72\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     73\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     74\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_agg_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/axes/_base.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self, renderer)\u001b[0m\n\u001b[1;32m   3062\u001b[0m             \u001b[0m_draw_rasterized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0martists_rasterized\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3063\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3064\u001b[0;31m         mimage._draw_list_compositing_images(\n\u001b[0m\u001b[1;32m   3065\u001b[0m             renderer, self, artists, self.figure.suppressComposite)\n\u001b[1;32m   3066\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/image.py\u001b[0m in \u001b[0;36m_draw_list_compositing_images\u001b[0;34m(renderer, parent, artists, suppress_composite)\u001b[0m\n\u001b[1;32m    129\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mnot_composite\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mhas_images\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    130\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0ma\u001b[0m \u001b[0;32min\u001b[0m \u001b[0martists\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 131\u001b[0;31m             \u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    132\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    133\u001b[0m         \u001b[0;31m# Composite any adjacent images together\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer)\u001b[0m\n\u001b[1;32m     70\u001b[0m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     71\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 72\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     73\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     74\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_agg_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/axis.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self, renderer, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1375\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1376\u001b[0m         \u001b[0mticks_to_draw\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_update_ticks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1377\u001b[0;31m         \u001b[0mtlb1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtlb2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_ticklabel_bboxes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mticks_to_draw\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1378\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1379\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mtick\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mticks_to_draw\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/axis.py\u001b[0m in \u001b[0;36m_get_ticklabel_bboxes\u001b[0;34m(self, ticks, renderer)\u001b[0m\n\u001b[1;32m   1302\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mrenderer\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1303\u001b[0m             \u001b[0mrenderer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_renderer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1304\u001b[0;31m         return ([tick.label1.get_window_extent(renderer)\n\u001b[0m\u001b[1;32m   1305\u001b[0m                  for tick in ticks if tick.label1.get_visible()],\n\u001b[1;32m   1306\u001b[0m                 [tick.label2.get_window_extent(renderer)\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/axis.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m   1302\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mrenderer\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1303\u001b[0m             \u001b[0mrenderer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_renderer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1304\u001b[0;31m         return ([tick.label1.get_window_extent(renderer)\n\u001b[0m\u001b[1;32m   1305\u001b[0m                  for tick in ticks if tick.label1.get_visible()],\n\u001b[1;32m   1306\u001b[0m                 [tick.label2.get_window_extent(renderer)\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/text.py\u001b[0m in \u001b[0;36mget_window_extent\u001b[0;34m(self, renderer, dpi)\u001b[0m\n\u001b[1;32m    957\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    958\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mcbook\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_setattr_cm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdpi\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdpi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 959\u001b[0;31m             \u001b[0mbbox\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minfo\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdescent\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_layout\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_renderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    960\u001b[0m             \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_unitless_position\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    961\u001b[0m             \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/text.py\u001b[0m in \u001b[0;36m_get_layout\u001b[0;34m(self, renderer)\u001b[0m\n\u001b[1;32m    384\u001b[0m             \u001b[0mclean_line\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mismath\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_preprocess_math\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    385\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mclean_line\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 386\u001b[0;31m                 w, h, d = _get_text_metrics_with_cache(\n\u001b[0m\u001b[1;32m    387\u001b[0m                     \u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclean_line\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fontproperties\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    388\u001b[0m                     ismath=ismath, dpi=self.figure.dpi)\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/text.py\u001b[0m in \u001b[0;36m_get_text_metrics_with_cache\u001b[0;34m(renderer, text, fontprop, ismath, dpi)\u001b[0m\n\u001b[1;32m     95\u001b[0m     \u001b[0;31m# Cached based on a copy of fontprop so that later in-place mutations of\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     96\u001b[0m     \u001b[0;31m# the passed-in argument do not mess up the cache.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 97\u001b[0;31m     return _get_text_metrics_with_cache_impl(\n\u001b[0m\u001b[1;32m     98\u001b[0m         weakref.ref(renderer), text, fontprop.copy(), ismath, dpi)\n\u001b[1;32m     99\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/text.py\u001b[0m in \u001b[0;36m_get_text_metrics_with_cache_impl\u001b[0;34m(renderer_ref, text, fontprop, ismath, dpi)\u001b[0m\n\u001b[1;32m    103\u001b[0m         renderer_ref, text, fontprop, ismath, dpi):\n\u001b[1;32m    104\u001b[0m     \u001b[0;31m# dpi is unused, but participates in cache invalidation (via the renderer).\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 105\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mrenderer_ref\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_text_width_height_descent\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtext\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfontprop\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mismath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    106\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    107\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/backends/backend_agg.py\u001b[0m in \u001b[0;36mget_text_width_height_descent\u001b[0;34m(self, s, prop, ismath)\u001b[0m\n\u001b[1;32m    232\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    233\u001b[0m         \u001b[0mfont\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_prepare_font\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprop\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 234\u001b[0;31m         \u001b[0mfont\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_text\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0.0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mflags\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mget_hinting_flag\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    235\u001b[0m         \u001b[0mw\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mh\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfont\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_width_height\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# width and height of unrotated string\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    236\u001b[0m         \u001b[0md\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfont\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_descent\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"markdown","source":["8. Conclusion\n","- Summarize your findings and any insights gained from the clustering analysis."],"metadata":{"id":"2cHWwYnrf0OM"}},{"cell_type":"code","source":["# Example: Conclusion\n","print(\"K-means clustering analysis completed. Insights:\")\n","# Your conclusions here\n"],"metadata":{"id":"_FItsr-Zf1nS","executionInfo":{"status":"aborted","timestamp":1698372333956,"user_tz":240,"elapsed":3,"user":{"displayName":"Jessica Herring","userId":"06888788680442545250"}}},"execution_count":null,"outputs":[]}]}